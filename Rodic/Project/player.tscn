[gd_scene load_steps=61 format=1]

[ext_resource path="res://png (2)/Dead (1).png" type="Texture" id=1]
[ext_resource path="res://png (2)/Dead (10).png" type="Texture" id=2]
[ext_resource path="res://png (2)/Dead (2).png" type="Texture" id=3]
[ext_resource path="res://png (2)/Dead (3).png" type="Texture" id=4]
[ext_resource path="res://png (2)/Dead (4).png" type="Texture" id=5]
[ext_resource path="res://png (2)/Dead (5).png" type="Texture" id=6]
[ext_resource path="res://png (2)/Dead (6).png" type="Texture" id=7]
[ext_resource path="res://png (2)/Dead (7).png" type="Texture" id=8]
[ext_resource path="res://png (2)/Dead (8).png" type="Texture" id=9]
[ext_resource path="res://png (2)/Dead (9).png" type="Texture" id=10]
[ext_resource path="res://png (2)/Idle (1).png" type="Texture" id=11]
[ext_resource path="res://png (2)/Idle (10).png" type="Texture" id=12]
[ext_resource path="res://png (2)/Idle (2).png" type="Texture" id=13]
[ext_resource path="res://png (2)/Idle (3).png" type="Texture" id=14]
[ext_resource path="res://png (2)/Idle (4).png" type="Texture" id=15]
[ext_resource path="res://png (2)/Idle (5).png" type="Texture" id=16]
[ext_resource path="res://png (2)/Idle (6).png" type="Texture" id=17]
[ext_resource path="res://png (2)/Idle (7).png" type="Texture" id=18]
[ext_resource path="res://png (2)/Idle (8).png" type="Texture" id=19]
[ext_resource path="res://png (2)/Idle (9).png" type="Texture" id=20]
[ext_resource path="res://png (2)/Jump (1).png" type="Texture" id=21]
[ext_resource path="res://png (2)/Jump (10).png" type="Texture" id=22]
[ext_resource path="res://png (2)/Jump (2).png" type="Texture" id=23]
[ext_resource path="res://png (2)/Jump (3).png" type="Texture" id=24]
[ext_resource path="res://png (2)/Jump (4).png" type="Texture" id=25]
[ext_resource path="res://png (2)/Jump (5).png" type="Texture" id=26]
[ext_resource path="res://png (2)/Jump (6).png" type="Texture" id=27]
[ext_resource path="res://png (2)/Jump (7).png" type="Texture" id=28]
[ext_resource path="res://png (2)/Jump (8).png" type="Texture" id=29]
[ext_resource path="res://png (2)/Jump (9).png" type="Texture" id=30]
[ext_resource path="res://png (2)/Melee (1).png" type="Texture" id=31]
[ext_resource path="res://png (2)/Melee (2).png" type="Texture" id=32]
[ext_resource path="res://png (2)/Melee (3).png" type="Texture" id=33]
[ext_resource path="res://png (2)/Melee (4).png" type="Texture" id=34]
[ext_resource path="res://png (2)/Melee (5).png" type="Texture" id=35]
[ext_resource path="res://png (2)/Melee (6).png" type="Texture" id=36]
[ext_resource path="res://png (2)/Melee (7).png" type="Texture" id=37]
[ext_resource path="res://png (2)/Run (1).png" type="Texture" id=38]
[ext_resource path="res://png (2)/Run (2).png" type="Texture" id=39]
[ext_resource path="res://png (2)/Run (3).png" type="Texture" id=40]
[ext_resource path="res://png (2)/Run (4).png" type="Texture" id=41]
[ext_resource path="res://png (2)/Run (5).png" type="Texture" id=42]
[ext_resource path="res://png (2)/Run (6).png" type="Texture" id=43]
[ext_resource path="res://png (2)/Run (7).png" type="Texture" id=44]
[ext_resource path="res://png (2)/Run (8).png" type="Texture" id=45]
[ext_resource path="res://png (2)/Shoot (1).png" type="Texture" id=46]
[ext_resource path="res://png (2)/Shoot (2).png" type="Texture" id=47]
[ext_resource path="res://png (2)/Shoot (3).png" type="Texture" id=48]
[ext_resource path="res://png (2)/Slide (1).png" type="Texture" id=49]
[ext_resource path="res://png (2)/Slide (2).png" type="Texture" id=50]
[ext_resource path="res://png (2)/Slide (3).png" type="Texture" id=51]
[ext_resource path="res://png (2)/Slide (4).png" type="Texture" id=52]
[ext_resource path="res://png (2)/Slide (5).png" type="Texture" id=53]

[sub_resource type="RectangleShape2D" id=1]

custom_solver_bias = 0.0
extents = Vector2( 10.8391, 12.1252 )

[sub_resource type="GDScript" id=2]

script/source = "extends KinematicBody2D

# This is a simple collision demo showing how
# the kinematic controller works.
# move() will allow to move the node, and will
# always move it to a non-colliding spot,
# as long as it starts from a non-colliding spot too.

# Member variables
const GRAVITY = 500.0 # Pixels/second

# Angle in degrees towards either side that the player can consider \"floor\"
const FLOOR_ANGLE_TOLERANCE = 40
const WALK_FORCE = 600
const WALK_MIN_SPEED = 50
const WALK_MAX_SPEED = 400
const STOP_FORCE = 1300
const JUMP_SPEED = 400
const JUMP_MAX_AIRBORNE_TIME = 0.5

const SLIDE_STOP_VELOCITY = 1.0 # One pixel per second
const SLIDE_STOP_MIN_TRAVEL = 1.0 # One pixel

var velocity = Vector2()
var on_air_time = 100
var jumping = false

var prev_jump_pressed = false

const ANIMATIONS = {IDLE=\"idle\", RUN=\"run\", JUMP=\"jump\"}
var playing_anim;

func _fixed_process(delta):
	# Create forces
	var force = Vector2(0, GRAVITY)
	
	var walk_left = Input.is_key_pressed(KEY_LEFT)
	var walk_right = Input.is_key_pressed(KEY_RIGHT)
	var jump = Input.is_key_pressed(KEY_SPACE)
	
	var stop = true
	var anim
	
	if (walk_left):
		get_node(\"sprite\").set_flip_h(true)
		if (velocity.x <= WALK_MIN_SPEED and velocity.x > -WALK_MAX_SPEED):
			force.x -= WALK_FORCE
			stop = false
	elif (walk_right):
		get_node(\"sprite\").set_flip_h(false)
		if (velocity.x >= -WALK_MIN_SPEED and velocity.x < WALK_MAX_SPEED):
			force.x += WALK_FORCE
			stop = false
	
	if (stop):
		var vsign = sign(velocity.x)
		var vlen = abs(velocity.x)
		
		vlen -= STOP_FORCE*delta
		if (vlen < 0):
			vlen = 0
		
		velocity.x = vlen*vsign
	# Integrate forces to velocity
	velocity += force*delta
	
	# Integrate velocity into motion and move
	var motion = velocity*delta
	
	# Move and consume motion
	motion = move(motion)
	
	var floor_velocity = Vector2()
	
	if (is_colliding()):
		# You can check which tile was collision against with this
		# print(get_collider_metadata())
		
		# Ran against something, is it the floor? Get normal
		var n = get_collision_normal()
		
		if (rad2deg(acos(n.dot(Vector2(0, -1)))) < FLOOR_ANGLE_TOLERANCE):
			# If angle to the \"up\" vectors is < angle tolerance
			# char is on floor
			on_air_time = 0
			floor_velocity = get_collider_velocity()
		
		if (on_air_time == 0 and force.x == 0 and get_travel().length() < SLIDE_STOP_MIN_TRAVEL and abs(velocity.x) < SLIDE_STOP_VELOCITY and get_collider_velocity() == Vector2()):
			# Since this formula will always slide the character around, 
			# a special case must be considered to to stop it from moving 
			# if standing on an inclined floor. Conditions are:
			# 1) Standing on floor (on_air_time == 0)
			# 2) Did not move more than one pixel (get_travel().length() < SLIDE_STOP_MIN_TRAVEL)
			# 3) Not moving horizontally (abs(velocity.x) < SLIDE_STOP_VELOCITY)
			# 4) Collider is not moving
			
			revert_motion()
			velocity.y = 0.0
		else:
			# For every other case of motion, our motion was interrupted.
			# Try to complete the motion by \"sliding\" by the normal
			motion = n.slide(motion)
			velocity = n.slide(velocity)
			# Then move again
			move(motion)
	
	if (floor_velocity != Vector2()):
		# If floor moves, move with floor
		move(floor_velocity*delta)
	
	if (jumping and velocity.y > 0):
		# If falling, no longer jumping
		jumping = false
	
	if (on_air_time < JUMP_MAX_AIRBORNE_TIME and jump and not prev_jump_pressed and not jumping):
		# Jump must also be allowed to happen if the character left the floor a little bit ago.
		# Makes controls more snappy.
		velocity.y = -JUMP_SPEED
		jumping = true
	
	on_air_time += delta
	prev_jump_pressed = jump
	
	var sound
	if (velocity == Vector2(0,0) && !jumping):
		anim = ANIMATIONS.IDLE
		sound = \"idle\"
	elif (jumping):
		anim = ANIMATIONS.JUMP
		sound = \"jump\"
	else:
		anim = ANIMATIONS.RUN
		sound = \"run\"
	
	if (anim != null && playing_anim != anim):
		get_node(\"sprite/anim\").play(anim)
		get_node(\"sound\").stop_all()
		if (sound != null):
			get_node(\"sound\").play(sound)
		
	playing_anim = anim;

func _ready():
	set_fixed_process(true)
"

[sub_resource type="SpriteFrames" id=3]

animations = [ {
"frames": [ ExtResource( 1 ), ExtResource( 2 ), ExtResource( 3 ), ExtResource( 4 ), ExtResource( 5 ), ExtResource( 6 ), ExtResource( 7 ), ExtResource( 8 ), ExtResource( 9 ), ExtResource( 10 ), ExtResource( 11 ), ExtResource( 12 ), ExtResource( 13 ), ExtResource( 14 ), ExtResource( 15 ), ExtResource( 16 ), ExtResource( 17 ), ExtResource( 18 ), ExtResource( 19 ), ExtResource( 20 ), ExtResource( 21 ), ExtResource( 22 ), ExtResource( 23 ), ExtResource( 24 ), ExtResource( 25 ), ExtResource( 26 ), ExtResource( 27 ), ExtResource( 28 ), ExtResource( 29 ), ExtResource( 30 ), ExtResource( 31 ), ExtResource( 32 ), ExtResource( 33 ), ExtResource( 34 ), ExtResource( 35 ), ExtResource( 36 ), ExtResource( 37 ), ExtResource( 38 ), ExtResource( 39 ), ExtResource( 40 ), ExtResource( 41 ), ExtResource( 42 ), ExtResource( 43 ), ExtResource( 44 ), ExtResource( 45 ), ExtResource( 46 ), ExtResource( 47 ), ExtResource( 48 ), ExtResource( 49 ), ExtResource( 50 ), ExtResource( 51 ), ExtResource( 52 ), ExtResource( 53 ) ],
"loop": true,
"name": "default",
"speed": 5.0
} ]

[sub_resource type="Animation" id=4]

length = 1.0
loop = false
step = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/imported = false
tracks/0/keys = {
"times": FloatArray( 0, 1 ),
"transitions": FloatArray( 1, 1 ),
"update": 0,
"values": [ 19, 19 ]
}

[sub_resource type="Animation" id=5]

length = 1.0
loop = false
step = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/imported = false
tracks/0/keys = {
"times": FloatArray( 0, 1 ),
"transitions": FloatArray( 1, 1 ),
"update": 0,
"values": [ 20, 29 ]
}

[sub_resource type="Animation" id=6]

length = 1.0
loop = false
step = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/imported = false
tracks/0/keys = {
"times": FloatArray( 0, 1 ),
"transitions": FloatArray( 1, 1 ),
"update": 0,
"values": [ 37, 44 ]
}

[sub_resource type="SampleLibrary" id=7]


[node name="player" type="KinematicBody2D"]

transform/pos = Vector2( 524.325, 199.811 )
transform/scale = Vector2( 0.735836, 0.839964 )
input/pickable = false
shapes/0/shape = SubResource( 1 )
shapes/0/transform = Matrix32( 11.7246, 0, 0, 16.0808, -3.19067, 282.941 )
shapes/0/trigger = false
collision/layers = 1
collision/mask = 1
collision/margin = 0.08
script/script = SubResource( 2 )

[node name="sprite" type="AnimatedSprite" parent="."]

transform/pos = Vector2( 25.8752, 258.187 )
transform/scale = Vector2( 0.766086, 0.907038 )
frames = SubResource( 3 )
animation = "default"
frame = 19

[node name="anim" type="AnimationPlayer" parent="sprite"]

playback/process_mode = 1
playback/default_blend_time = 0.0
root/root = NodePath("..")
anims/idle = SubResource( 4 )
anims/jump = SubResource( 5 )
anims/run = SubResource( 6 )
playback/active = true
playback/speed = 1.0
blend_times = [  ]
autoplay = ""

[node name="Camera2D" type="Camera2D" parent="sprite"]

transform/pos = Vector2( -50.3333, -18.6564 )
transform/scale = Vector2( 5.45696, 5.9706 )
anchor_mode = 1
rotating = false
current = true
zoom = Vector2( 1, 1 )
limit/left = -10000000
limit/top = -10000000
limit/right = 10000000
limit/bottom = 10000000
drag_margin/h_enabled = true
drag_margin/v_enabled = true
smoothing/enable = true
smoothing/speed = 5.0
drag_margin/left = 0.2
drag_margin/top = 0.2
drag_margin/right = 0.2
drag_margin/bottom = 0.2

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]

transform/pos = Vector2( -3.19067, 282.941 )
transform/scale = Vector2( 11.7246, 16.0808 )
shape = SubResource( 1 )
trigger = false
_update_shape_index = 0

[node name="sound" type="SamplePlayer2D" parent="."]

transform/pos = Vector2( 0, 14.8033 )
transform/scale = Vector2( 1, 0.537397 )
params/volume_db = 0.0
params/pitch_scale = 1.0
params/attenuation/min_distance = 1.0
params/attenuation/max_distance = 2048.0
params/attenuation/distance_exp = 1.0
config/polyphony = 1
config/samples = SubResource( 7 )
config/pitch_random = 0.0


